{
  "Resources": {
    "appsg42805CE6": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/app-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow SSH access from anywhere",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow node_exporter access from anywhere",
            "FromPort": 9100,
            "IpProtocol": "tcp",
            "ToPort": 9100
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow all http acess",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": "vpc-014eff56898605bfd"
      }
    },
    "asgBaselineInstanceRoleBAFF0850": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/asgBaseline"
          }
        ]
      }
    },
    "asgBaselineInstanceRoleDefaultPolicyD58F3F8B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "asgBaselineInstanceRoleDefaultPolicyD58F3F8B",
        "Roles": [
          {
            "Ref": "asgBaselineInstanceRoleBAFF0850"
          }
        ]
      }
    },
    "asgBaselineInstanceProfile5B3EB932": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "asgBaselineInstanceRoleBAFF0850"
          }
        ]
      }
    },
    "asgBaselineLaunchConfig3384BBEF": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": {
          "Ref": "asgBaselineInstanceProfile5B3EB932"
        },
        "KeyName": "ec2-key-pair",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "appsg42805CE6",
              "GroupId"
            ]
          },
          "sg-0a1f19d4555b0d621"
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\nmkdir -p $(dirname '/home/ec2-user/baseline.tar')\naws s3 cp 's3://",
                {
                  "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                },
                "/",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3VersionKey266AAF62"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3VersionKey266AAF62"
                        }
                      ]
                    }
                  ]
                },
                "' '/home/ec2-user/baseline.tar'\nmkdir -p $(dirname '/home/ec2-user/docker-compose.yml')\naws s3 cp 's3://",
                {
                  "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                },
                "/",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3VersionKeyC9EBF549"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3VersionKeyC9EBF549"
                        }
                      ]
                    }
                  ]
                },
                "' '/home/ec2-user/docker-compose.yml'\n#!/bin/bash\n\n# system update\nyum update -y\n\n# install git\nyum install git\n\n# docker installation\namazon-linux-extras install docker\nservice docker start\nsystemctl enable docker\nusermod -a -G docker $USER\n\n# docker-compose installation\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n# download node_exporter\nuseradd -m -s /bin/bash prometheus\n\ncurl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.2.2/node_exporter-1.2.2.linux-amd64.tar.gz\n\ntar -xzvf node_exporter-1.2.2.linux-amd64.tar.gz\nmv node_exporter-1.2.2.linux-amd64 /home/prometheus/node_exporter\nrm node_exporter-1.2.2.linux-amd64.tar.gz\nchown -R prometheus:prometheus /home/prometheus/node_exporter\n\n# Add node_exporter as systemd service\ntee -a /etc/systemd/system/node_exporter.service << END\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n[Service]\nUser=prometheus\nExecStart=/home/prometheus/node_exporter/node_exporter\n[Install]\nWantedBy=default.target\nEND\n\nsystemctl daemon-reload\nsystemctl start node_exporter\nsystemctl enable node_exporter\n\n# setup demo app\n# yum install -y httpd\n# systemctl start httpd\n# systemctl enable httpd\n# echo \"<style> body {background-color: lightblue;} </style>\" > /var/www/html/index.html\n# echo \"<h1>Hello World from $(hostname -f) BASELINE instance 1</h1>\" >> /var/www/html/index.html\n\n\n\n# yum update -y\n# sudo su\n# \n# amazon-linux-extras install -y nginx1\n# systemctl start nginx\n# systemctl enable nginx\n# \n# chmod 2775 /usr/share/nginx/html\n# find /usr/share/nginx/html -type d -exec chmod 2775 {} \\;\n# find /usr/share/nginx/html -type f -exec chmod 0664 {} \\;\n# \n# echo \"<h1>Baseline</h1>\" > /usr/share/nginx/html/index.html\n\n\n# create a docker image from the tarball\ndocker load -i /home/ec2-user/baseline.tar\n\n# run the docker image\n# docker run -d -p 80:80 baseline\n\n# run docker-compose\ndocker-compose -f /home/ec2-user/docker-compose.yml up -d"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "asgBaselineInstanceRoleDefaultPolicyD58F3F8B",
        "asgBaselineInstanceRoleBAFF0850"
      ]
    },
    "asgBaselineASGAAFD1D57": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "asgBaselineLaunchConfig3384BBEF"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/asgBaseline"
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "BASELINETARGETAF50761C"
          }
        ],
        "VPCZoneIdentifier": [
          "subnet-0e237f9b06a735079",
          "subnet-0a202e701a4e15a0e",
          "subnet-0ebcd20c5e95abcc9"
        ]
      },
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "asgCanaryInstanceRoleA9725CA5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/asgCanary"
          }
        ]
      }
    },
    "asgCanaryInstanceRoleDefaultPolicyAAE1B8D1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "asgCanaryInstanceRoleDefaultPolicyAAE1B8D1",
        "Roles": [
          {
            "Ref": "asgCanaryInstanceRoleA9725CA5"
          }
        ]
      }
    },
    "asgCanaryInstanceProfile2D89516E": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "asgCanaryInstanceRoleA9725CA5"
          }
        ]
      }
    },
    "asgCanaryLaunchConfigF5F72991": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": {
          "Ref": "asgCanaryInstanceProfile2D89516E"
        },
        "KeyName": "ec2-key-pair",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "appsg42805CE6",
              "GroupId"
            ]
          },
          "sg-0a1f19d4555b0d621"
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\nmkdir -p $(dirname '/home/ec2-user/canary.tar')\naws s3 cp 's3://",
                {
                  "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73"
                },
                "/",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3VersionKey266AAF62"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3VersionKey266AAF62"
                        }
                      ]
                    }
                  ]
                },
                "' '/home/ec2-user/canary.tar'\nmkdir -p $(dirname '/home/ec2-user/docker-compose.yml')\naws s3 cp 's3://",
                {
                  "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F"
                },
                "/",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3VersionKeyC9EBF549"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3VersionKeyC9EBF549"
                        }
                      ]
                    }
                  ]
                },
                "' '/home/ec2-user/docker-compose.yml'\n#!/bin/bash\n\n# system update\nyum update -y\n\n# install git\nyum install git\n\n# docker installation\namazon-linux-extras install docker\nservice docker start\nsystemctl enable docker\nusermod -a -G docker $USER\n\n# docker-compose installation\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n# download node_exporter\nuseradd -m -s /bin/bash prometheus\n\ncurl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.2.2/node_exporter-1.2.2.linux-amd64.tar.gz\n\ntar -xzvf node_exporter-1.2.2.linux-amd64.tar.gz\nmv node_exporter-1.2.2.linux-amd64 /home/prometheus/node_exporter\nrm node_exporter-1.2.2.linux-amd64.tar.gz\nchown -R prometheus:prometheus /home/prometheus/node_exporter\n\n# Add node_exporter as systemd service\ntee -a /etc/systemd/system/node_exporter.service << END\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n[Service]\nUser=prometheus\nExecStart=/home/prometheus/node_exporter/node_exporter\n[Install]\nWantedBy=default.target\nEND\n\nsystemctl daemon-reload\nsystemctl start node_exporter\nsystemctl enable node_exporter\n\n# setup demo app\n# yum install -y httpd\n# systemctl start httpd\n# systemctl enable httpd\n# echo \"<style> body {background-color: gold;} </style>\" > /var/www/html/index.html\n# echo \"<h1>Hello World from $(hostname -f) CANARY instance 1</h1>\" >> /var/www/html/index.html\n\n\n\n# yum update -y\n# sudo su\n# \n# amazon-linux-extras install -y nginx1\n# systemctl start nginx\n# systemctl enable nginx\n# \n# chmod 2775 /usr/share/nginx/html\n# find /usr/share/nginx/html -type d -exec chmod 2775 {} \\;\n# find /usr/share/nginx/html -type f -exec chmod 0664 {} \\;\n# \n# echo \"<h1>Canary</h1>\" > /usr/share/nginx/html/index.html\n\n# create a docker image from the tarball\ndocker load -i /home/ec2-user/canary.tar\n\n# run the docker image\n# docker run -d -p 80:80 canary\n\n# run docker-compose\ndocker-compose -f /home/ec2-user/docker-compose.yml up -d"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "asgCanaryInstanceRoleDefaultPolicyAAE1B8D1",
        "asgCanaryInstanceRoleA9725CA5"
      ]
    },
    "asgCanaryASGFA3929DF": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "asgCanaryLaunchConfigF5F72991"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/asgCanary"
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "CANARYTARGET8CC1BC3F"
          }
        ],
        "VPCZoneIdentifier": [
          "subnet-0e237f9b06a735079",
          "subnet-0a202e701a4e15a0e",
          "subnet-0ebcd20c5e95abcc9"
        ]
      },
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "BASELINETARGETAF50761C": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckPath": "/",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "instance",
        "VpcId": "vpc-014eff56898605bfd"
      }
    },
    "CANARYTARGET8CC1BC3F": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckPath": "/",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "instance",
        "VpcId": "vpc-014eff56898605bfd"
      }
    },
    "monitorsg419B1E56": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/monitor-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow prometheus access",
            "FromPort": 9090,
            "IpProtocol": "tcp",
            "ToPort": 9090
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow grafana access",
            "FromPort": 3000,
            "IpProtocol": "tcp",
            "ToPort": 3000
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow kayenta access",
            "FromPort": 8090,
            "IpProtocol": "tcp",
            "ToPort": 8090
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow referee access",
            "FromPort": 3001,
            "IpProtocol": "tcp",
            "ToPort": 3001
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "allow SSH access from anywhere",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "VpcId": "vpc-014eff56898605bfd"
      }
    },
    "monitorInstanceRole4CE258F3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/monitor"
          }
        ]
      }
    },
    "monitorInstanceProfile6E9B6855": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "monitorInstanceRole4CE258F3"
          }
        ]
      }
    },
    "monitor360B0AD7": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "IamInstanceProfile": {
          "Ref": "monitorInstanceProfile6E9B6855"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.medium",
        "KeyName": "ec2-key-pair",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "monitorsg419B1E56",
              "GroupId"
            ]
          }
        ],
        "SubnetId": "subnet-0e237f9b06a735079",
        "Tags": [
          {
            "Key": "Name",
            "Value": "aria-canary-cdk-s-alb8A-FCKJMZAM1M2Q/monitor"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash\n#!/bin/bash\n\n# update\nyum update -y\n\n# install git\nyum install git\n\n# docker installation\namazon-linux-extras install docker\nservice docker start\nsystemctl enable docker\nusermod -a -G docker ec2-user\n\n# docker-compose installation\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n# create/download prometheus config file\n# this placeholder file needs its access and secret keys replaced\n# it looks currently only for node_exporter\n\n# YOU NEED TO CREATE A AWS USER AND PUT ITS ACCESS_KEY AND SECRET_KEY HERE\n# GIVE THIS USER THE FOLLOWING PERMISSION: AmazonEC2ReadOnlyAccess\ntee -a /home/ec2-user/prometheus.yml << END\nglobal:\n  scrape_interval: 1s\n  evaluation_interval: 1s\n\nscrape_configs:\n  - job_name: 'node'\n    relabel_configs:\n    - source_labels: [__meta_ec2_tag_Name]\n      target_label: instance\n    ec2_sd_configs:\n      - access_key: AKIA6BSWO5SXAX6JGHPN \n        secret_key: 9EcP/Cb/TTqNMZedMa7jq3L5Vj5vi9VPPSu0i4ns\n        port: 9100\nEND\n\n# labelling examples\n# scrape_configs:\n#   - job_name: 'node'\n#     relabel_configs:\n#     - source_labels: [__meta_ec2_tag_Name]\n#       target_label: instance\n#     ec2_sd_configs:\n#       - region: us-east-1\n#         access_key: \n#         secret_key: \n#         port: 9100\n#         filters:\n#           - name: tag:Name\n#             values:\n#               - canary-instance\n#               - baseline-instance\n\n\n# link that describes different filters\n# https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\n\n# move to home directory so config files land there\ncd /home/ec2-user\n\n# THESE FILES NEED TO BE PLACED ELSEWHERE\n# download docker-compose.yml for all traffic monitor/analysis apps\nwget 'https://raw.githubusercontent.com/caleblayneheath/my-aria/main/configs/docker-compose.yml' -O docker-compose.yml\n\n# download kayenta.yml for kayenta configuration\nwget 'https://raw.githubusercontent.com/caleblayneheath/my-aria/main/configs/kayenta.yml' -O kayenta.yml\n\n# change ownership of all files in home directory to ec2-user\nchown -R ec2-user:ec2-user .\n\n# bring up containers for monitoring/analysis\ndocker-compose up\n"
        }
      },
      "DependsOn": [
        "monitorInstanceRole4CE258F3"
      ]
    }
  },
  "Parameters": {
    "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3Bucket16AD8F73": {
      "Type": "String",
      "Description": "S3 bucket for asset \"2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93a\""
    },
    "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aS3VersionKey266AAF62": {
      "Type": "String",
      "Description": "S3 key for asset version \"2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93a\""
    },
    "AssetParameters2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93aArtifactHash9152198E": {
      "Type": "String",
      "Description": "Artifact hash for asset \"2aa80583ed93ef1be14c733ae8744802cd720971df63aa15d8a6f9f6dc54a93a\""
    },
    "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3Bucket1196C49F": {
      "Type": "String",
      "Description": "S3 bucket for asset \"4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56\""
    },
    "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56S3VersionKeyC9EBF549": {
      "Type": "String",
      "Description": "S3 key for asset version \"4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56\""
    },
    "AssetParameters4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56ArtifactHashB97AD486": {
      "Type": "String",
      "Description": "Artifact hash for asset \"4e4460923ad43c43266352c77e9f346197ad96488f8f9961e1824a5b1d84be56\""
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    }
  },
  "Outputs": {
    "ariacanary": {
      "Value": "true"
    },
    "ariaconfig": {
      "Value": ""
    },
    "BaselineTargetGroupArn": {
      "Value": {
        "Ref": "BASELINETARGETAF50761C"
      }
    },
    "CanaryTargetGroupArn": {
      "Value": {
        "Ref": "CANARYTARGET8CC1BC3F"
      }
    },
    "prometheusDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "monitor360B0AD7",
                "PublicDnsName"
              ]
            },
            ":9090"
          ]
        ]
      }
    },
    "grafanaDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "monitor360B0AD7",
                "PublicDnsName"
              ]
            },
            ":3000"
          ]
        ]
      }
    },
    "kayentaDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "monitor360B0AD7",
                "PublicDnsName"
              ]
            },
            ":8090/swagger-ui.html"
          ]
        ]
      }
    },
    "refereeDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "monitor360B0AD7",
                "PublicDnsName"
              ]
            },
            ":3001"
          ]
        ]
      }
    }
  }
}